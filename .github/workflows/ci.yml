name: Test

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main


jobs:
  test:
    runs-on: ${{ matrix.os }}

    timeout-minutes: 10

    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false

    services:
      postgres:
        image: postgres:14.5-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres_container

      s3:
        image: bitnami/minio:2022
        ports:
          - "9000:9000"
        volumes:
          - storage:/data
        env:
          MINIO_ROOT_USER: lyonkit
          MINIO_ROOT_PASSWORD: lyonkit-s3-secret
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
          --name s3_container

    env:
      DATABASE_URL: postgresql://postgres:root@localhost:5432/test
      RUST_LOG: warn
      TEST_LOG: true
      RUST_BACKTRACE: full
      S3__ENDPOINT: "http://localhost:9000"
      S3__BASE_URL: "http://localhost:9000"
      S3__CREDENTIALS__ACCESS_KEY_ID: lyonkit
      S3__CREDENTIALS__SECRET_ACCESS_KEY: lyonkit-s3-secret
      S3__REGION: us-west-1

    steps:
      - name: Configure Postgres
        run: |
          docker exec -i postgres_container sed -i -e 's/max_connections = 100/max_connections = 1000/' /var/lib/postgresql/data/postgresql.conf &&
          docker exec -i postgres_container sed -i -e 's/shared_buffers = 128MB/shared_buffers = 2GB/' /var/lib/postgresql/data/postgresql.conf &&
          docker restart -t 0 postgres_container
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1
        with:
          key: v1 # increment this to bust the cache if needed
      - name: Rustfmt
        run: cargo fmt --all -- --check
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
      - uses: taiki-e/install-action@nextest
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run --all